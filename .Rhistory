test <- function(x)
{ m <- x}
test <- function(x)
{ x <- m}
test
mat <- matrix(1:4, ncol=2)
inv <- cachemean(mat)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x=c(1,2)
m=cachemean(x)
m <- cachemean(x)
m <- cachemean(makeVector(x))
m
m <- cachemean(makeVector(x))
cachemean(makeVector(x))
cachemean(makeVector(x))
cachex <- makeVector(x)
cachemean(cachex)
cachemean(cachex)
cachex <- makeVector(c(2.5))
cachemean(cachex)
null==matrix()
is.null(matrix())
matrix()
is.na(matrix())
NA==matrix()
x <- NA==matrix()
x
class(x)
?NA
## Put comments here that give an overall description of what your
## functions do
## Return to a list of 4 functions
makeCacheMatrix <- function(x = matrix()) {
invMat <- NULL
set <- function(y) {
x <<- y
invMat<<-NULL
}
get <- function() x
setInv <- function(sol) invMat <- sol
getInv <- function() invMat
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
## Solve the inverse matrix after searching if it has already been solved
cacheSolve <- function(x, ...) {
invMat <- x$getInv()
if(!is.null(intMat)) {
message("getting cached data")
return(intMat)
}
data <- x$get()
invMat <- sol(data, ...)
x$setmean(invMat)
invMat
}
x <- makeCacheMatrix(matrix(1:4, ncol=2))
x
cacheSolve(x)
## Put comments here that give an overall description of what your
## functions do
## Return to a list of 4 functions
makeCacheMatrix <- function(x = matrix()) {
invMat <- NULL
set <- function(y) {
x <<- y
invMat<<-NULL
}
get <- function() x
setInv <- function(sol) invMat <- sol
getInv <- function() invMat
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
## Solve the inverse matrix after searching if it has already been solved
cacheSolve <- function(x, ...) {
invMat <- x$getInv()
if(!is.null(intMat)) {
message("getting cached data")
return(invMat)
}
data <- x$get()
invMat <- sol(data, ...)
x$setmean(invMat)
invMat
}
cacheSolve(x)
if(!is.null(invMat)) {
## Put comments here that give an overall description of what your
## functions do
## Return to a list of 4 functions
makeCacheMatrix <- function(x = matrix()) {
invMat <- NULL
set <- function(y) {
x <<- y
invMat<<-NULL
}
get <- function() x
setInv <- function(sol) invMat <- sol
getInv <- function() invMat
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
## Solve the inverse matrix after searching if it has already been solved
cacheSolve <- function(x, ...) {
invMat <- x$getInv()
if(!is.null(invMat)) {
message("getting cached data")
return(invMat)
}
data <- x$get()
invMat <- sol(data, ...)
x$setmean(invMat)
invMat
}
cacheSolve(x)
cacheSolve(x)
## Put comments here that give an overall description of what your
## functions do
## Return to a list of 4 functions
makeCacheMatrix <- function(x = matrix()) {
invMat <- NULL
set <- function(y) {
x <<- y
invMat<<-NULL
}
get <- function() x
setInv <- function(sol) invMat <- sol
getInv <- function() invMat
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
## Solve the inverse matrix after searching if it has already been solved
cacheSolve <- function(x, ...) {
invMat <- x$getInv()
if(!is.null(invMat)) {
message("getting cached data")
return(invMat)
}
data <- x$get()
invMat <- sol(data, ...)
x$setmean(invMat)
invMat
}
cacheSolve(x)
## Put comments here that give an overall description of what your
## functions do
## Return to a list of 4 functions
makeCacheMatrix <- function(x = matrix()) {
invMat <- NULL
set <- function(y) {
x <<- y
invMat<<-NULL
}
get <- function() x
setInv <- function(sol) invMat <- sol
getInv <- function() invMat
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
## Solve the inverse matrix after searching if it has already been solved
cacheSolve <- function(x, ...) {
invMat <- x$getInv()
if(!is.null(invMat)) {
message("getting cached data")
return(invMat)
}
data <- x$get()
invMat <- solve(data, ...)
x$setmean(invMat)
invMat
}
cacheSolve(x)
x$getInv()
x <- makeCacheMatrix(matrix(1:4, ncol=2))
x$setInv()
x$getInv()
x <- makeVector(x=c(1:2))
x
x$get()
x$getmean()
x$set()
mat <- makeCacheMatrix(matrix(1:4, ncol=2))
mat$get()
cacheSolve(x)
cacheSolve(mat)
## Put comments here that give an overall description of what your
## functions do
## Return to a list of 4 functions
makeCacheMatrix <- function(x = matrix()) {
invMat <- NULL
set <- function(y) {
x <<- y
invMat<<-NULL
}
get <- function() x
setInv <- function(sol) invMat <- sol
getInv <- function() invMat
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
## Solve the inverse matrix after searching if it has already been solved
cacheSolve <- function(x, ...) {
invMat <- x$getInv()
print "1"
if(!is.null(invMat)) {
message("getting cached data")
return(invMat)
}
print "2"
data <- x$get()
invMat <- solve(data, ...)
x$setmean(invMat)
invMat
}
## Put comments here that give an overall description of what your
## functions do
## Return to a list of 4 functions
makeCacheMatrix <- function(x = matrix()) {
invMat <- NULL
set <- function(y) {
x <<- y
invMat<<-NULL
}
get <- function() x
setInv <- function(sol) invMat <- sol
getInv <- function() invMat
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
## Solve the inverse matrix after searching if it has already been solved
cacheSolve <- function(x, ...) {
invMat <- x$getInv()
print("1")
if(!is.null(invMat)) {
message("getting cached data")
return(invMat)
}
print( "2")
data <- x$get()
invMat <- solve(data, ...)
x$setmean(invMat)
invMat
}
mat
cacheSolve(mat)
mat$get()
## Put comments here that give an overall description of what your
## functions do
## Return to a list of 4 functions
makeCacheMatrix <- function(x = matrix()) {
invMat <- NULL
set <- function(y) {
x <<- y
invMat<<-NULL
}
get <- function() x
setInv <- function(sol) invMat <- sol
getInv <- function() invMat
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
## Solve the inverse matrix after searching if it has already been solved
cacheSolve <- function(x, ...) {
invMat <- x$getInv()
if(!is.null(invMat)) {
message("getting cached data")
return(invMat)
}
data <- x$get()
print("data")
invMat <- solve(data, ...)
x$setmean(invMat)
invMat
}
cacheSolve(mat)
## Put comments here that give an overall description of what your
## functions do
## Return to a list of 4 functions
makeCacheMatrix <- function(x = matrix()) {
invMat <- NULL
set <- function(y) {
x <<- y
invMat<<-NULL
}
get <- function() x
setInv <- function(sol) invMat <- sol
getInv <- function() invMat
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
## Solve the inverse matrix after searching if it has already been solved
cacheSolve <- function(x, ...) {
invMat <- x$getInv()
if(!is.null(invMat)) {
message("getting cached data")
return(invMat)
}
data <- x$get()
invMat <- solve(data, ...)
x$setInv(invMat)
invMat
}
cacheSolve(mat)
y <- cacheSolve(mat)
y
y%*%mat
y %*% mat
class(mat)
y %*% mat$get()
source('~/R_practice/git_pra/ProgrammingAssignment2/cachematrix.R')
